{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { CreateTask, UpdateTaskById, DeleteTaskById } from '../api';\nimport { useApp } from '../context/AppContext';\nimport { notify } from '../utils';\nexport const useTasks = () => {\n  _s();\n  const {\n    addTask,\n    updateTask,\n    deleteTask,\n    fetchAllTasks\n  } = useApp();\n  const [loading, setLoading] = useState(false);\n  const createTask = async taskData => {\n    setLoading(true);\n    try {\n      const {\n        success,\n        message,\n        data\n      } = await CreateTask(taskData);\n      if (success) {\n        addTask(data);\n        notify(message, 'success');\n        return {\n          success: true,\n          data\n        };\n      } else {\n        notify(message, 'error');\n        return {\n          success: false,\n          message\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Failed to create task';\n      notify(errorMessage, 'error');\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const editTask = async (taskId, taskData) => {\n    setLoading(true);\n    try {\n      const {\n        success,\n        message,\n        data\n      } = await UpdateTaskById(taskId, taskData);\n      if (success) {\n        updateTask(data);\n        notify(message, 'success');\n        return {\n          success: true,\n          data\n        };\n      } else {\n        notify(message, 'error');\n        return {\n          success: false,\n          message\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Failed to update task';\n      notify(errorMessage, 'error');\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const removeTask = async taskId => {\n    if (!window.confirm('Are you sure you want to delete this task?')) {\n      return {\n        success: false,\n        message: 'Action cancelled'\n      };\n    }\n    setLoading(true);\n    try {\n      const {\n        success,\n        message\n      } = await DeleteTaskById(taskId);\n      if (success) {\n        deleteTask(taskId);\n        notify(message, 'success');\n        return {\n          success: true\n        };\n      } else {\n        notify(message, 'error');\n        return {\n          success: false,\n          message\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Failed to delete task';\n      notify(errorMessage, 'error');\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const toggleTaskCompletion = async task => {\n    return await editTask(task._id, {\n      ...task,\n      isDone: !task.isDone\n    });\n  };\n  const bulkDeleteTasks = async taskIds => {\n    if (!window.confirm(`Are you sure you want to delete ${taskIds.length} tasks?`)) {\n      return {\n        success: false,\n        message: 'Action cancelled'\n      };\n    }\n    setLoading(true);\n    try {\n      const results = await Promise.all(taskIds.map(id => DeleteTaskById(id)));\n      const successCount = results.filter(result => result.success).length;\n      const failureCount = results.length - successCount;\n      if (successCount > 0) {\n        // Remove successful deletions from state\n        taskIds.forEach(id => deleteTask(id));\n        notify(`Successfully deleted ${successCount} tasks`, 'success');\n      }\n      if (failureCount > 0) {\n        notify(`Failed to delete ${failureCount} tasks`, 'error');\n      }\n      return {\n        success: successCount > 0,\n        successCount,\n        failureCount\n      };\n    } catch (error) {\n      const errorMessage = 'Failed to delete tasks';\n      notify(errorMessage, 'error');\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshTasks = async () => {\n    setLoading(true);\n    try {\n      await fetchAllTasks();\n      notify('Tasks refreshed successfully', 'success');\n    } catch (error) {\n      notify('Failed to refresh tasks', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    loading,\n    createTask,\n    editTask,\n    removeTask,\n    toggleTaskCompletion,\n    bulkDeleteTasks,\n    refreshTasks\n  };\n};\n_s(useTasks, \"hAwBkHKw7DYaX9lrXrk28O6ysrs=\", false, function () {\n  return [useApp];\n});","map":{"version":3,"names":["useState","CreateTask","UpdateTaskById","DeleteTaskById","useApp","notify","useTasks","_s","addTask","updateTask","deleteTask","fetchAllTasks","loading","setLoading","createTask","taskData","success","message","data","error","errorMessage","editTask","taskId","removeTask","window","confirm","toggleTaskCompletion","task","_id","isDone","bulkDeleteTasks","taskIds","length","results","Promise","all","map","id","successCount","filter","result","failureCount","forEach","refreshTasks"],"sources":["C:/Users/shree/Desktop/Project-management-tool/frontend/src/hooks/useTasks.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { CreateTask, UpdateTaskById, DeleteTaskById } from '../api';\r\nimport { useApp } from '../context/AppContext';\r\nimport { notify } from '../utils';\r\n\r\nexport const useTasks = () => {\r\n  const { addTask, updateTask, deleteTask, fetchAllTasks } = useApp();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const createTask = async (taskData) => {\r\n    setLoading(true);\r\n    try {\r\n      const { success, message, data } = await CreateTask(taskData);\r\n      if (success) {\r\n        addTask(data);\r\n        notify(message, 'success');\r\n        return { success: true, data };\r\n      } else {\r\n        notify(message, 'error');\r\n        return { success: false, message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = 'Failed to create task';\r\n      notify(errorMessage, 'error');\r\n      return { success: false, message: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const editTask = async (taskId, taskData) => {\r\n    setLoading(true);\r\n    try {\r\n      const { success, message, data } = await UpdateTaskById(taskId, taskData);\r\n      if (success) {\r\n        updateTask(data);\r\n        notify(message, 'success');\r\n        return { success: true, data };\r\n      } else {\r\n        notify(message, 'error');\r\n        return { success: false, message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = 'Failed to update task';\r\n      notify(errorMessage, 'error');\r\n      return { success: false, message: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const removeTask = async (taskId) => {\r\n    if (!window.confirm('Are you sure you want to delete this task?')) {\r\n      return { success: false, message: 'Action cancelled' };\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const { success, message } = await DeleteTaskById(taskId);\r\n      if (success) {\r\n        deleteTask(taskId);\r\n        notify(message, 'success');\r\n        return { success: true };\r\n      } else {\r\n        notify(message, 'error');\r\n        return { success: false, message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = 'Failed to delete task';\r\n      notify(errorMessage, 'error');\r\n      return { success: false, message: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleTaskCompletion = async (task) => {\r\n    return await editTask(task._id, { ...task, isDone: !task.isDone });\r\n  };\r\n\r\n  const bulkDeleteTasks = async (taskIds) => {\r\n    if (!window.confirm(`Are you sure you want to delete ${taskIds.length} tasks?`)) {\r\n      return { success: false, message: 'Action cancelled' };\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const results = await Promise.all(\r\n        taskIds.map(id => DeleteTaskById(id))\r\n      );\r\n      \r\n      const successCount = results.filter(result => result.success).length;\r\n      const failureCount = results.length - successCount;\r\n\r\n      if (successCount > 0) {\r\n        // Remove successful deletions from state\r\n        taskIds.forEach(id => deleteTask(id));\r\n        notify(`Successfully deleted ${successCount} tasks`, 'success');\r\n      }\r\n\r\n      if (failureCount > 0) {\r\n        notify(`Failed to delete ${failureCount} tasks`, 'error');\r\n      }\r\n\r\n      return { success: successCount > 0, successCount, failureCount };\r\n    } catch (error) {\r\n      const errorMessage = 'Failed to delete tasks';\r\n      notify(errorMessage, 'error');\r\n      return { success: false, message: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshTasks = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await fetchAllTasks();\r\n      notify('Tasks refreshed successfully', 'success');\r\n    } catch (error) {\r\n      notify('Failed to refresh tasks', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    createTask,\r\n    editTask,\r\n    removeTask,\r\n    toggleTaskCompletion,\r\n    bulkDeleteTasks,\r\n    refreshTasks\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}